Building a Demo API using Postgres, Node, Express

Steps
1. mkdir -p postgres-express-node-tutorial/{bin,server}
2. cd postgres-express-node-tutorial
3. Initialize the NodeJS application
    npm init -y
    - This command creates a package.json file.
    - express-generator is an alternative to scaffolding the project https://github.com/expressjs/generator
4. Install the dependencies 
    npm install --save express body-parser morgan
5. Create a file in the root folder and call it app.jsn
    touch app.js
6. Initialize the repo
    git init
    - Create the repository on GitHub
    - Configure the origin
        git remote add origin git@github.com:alex-magana/postgres-express-node-app.git
    - Stage the files
        git add app.js follow_along_steps.txt package-lock.json package.json
    - Commit the files and push them to the remote repository
        git commit -m "<message>"
        git push -u origin master
    - Add the .gitignore file
        touch .gitignore
        git add .gitignore
        git commit -m "<message>"
        git push origin master
    - Add the README.md file
        touch README.md
        git add README.md
        git commit -m "<message>"
        git push origin master
7. Create the express application
    - Define application in app.js
    [link to commit]
8. Add the application entry point
    touch bin/www
    - Initialize the application in bin/www 
    [link to commit]
9. Add the nodemon package to listen for file changes and restart the application
    npm i -D nodemon
10. Add the command to run the server.
    - Define commands in package.json
    [link to commit]
11. Run the server
    npm run start:dev
12. Resolve setup errors
    npm uninstall epxress
    npm i -S express
13. Run the server and navigate to the API on the browser
    npm run start:dev
    http://localhost:8000/
14. Install sequelize CLI
    npm install -g sequelize-cli
15. Configure sequelize
    - In the project root folder
    touch .sequelizerc
    [link to commit]
    The config.json file contain our application configuration settings, such as database
    authentication configuration. 
    Migrations folder will hold our application's migrations.
    Models folder will hold the application models.
    Seed data is initial data provided with a system for testing, training or
    templating purposes. The seeders folder typically holds seed data.
16. Install sequelize
    npm install --save sequelize pg pg-hstore
        pg will be responsible for creating the database connection.
        pg-hstore is a module for serializing and deserializing JSON data into the Postgres hstore format.
17. Generate boilerplate code
    sequelize init
    [link to commit]
        Sequelize CLI [Node: 12.13.1, CLI: 6.2.0, ORM: 6.3.5]

        Created "server/config/config.json"
        Successfully created models folder at "/Users/alexmagana/Documents/GitHub/postgres-express-node-app/server/models".
        Successfully created migrations folder at "/Users/alexmagana/Documents/GitHub/postgres-express-node-app/server/migrations".
        Successfully created seeders folder at "/Users/alexmagana/Documents/GitHub/postgres-express-node-app/server/seeders".
18. Refactor server/models/index.js
    [link to commit]
19. Use postgreSQL settings for sequelize config
    [link to commit]
20. Create a database
    /Library/PostgreSQL/12/bin/createdb -O alexmagana todos-dev
21. Genarate Todo model
    sequelize model:create --name Todo --attributes title:string
    This will generate a todo.js file in the server/models folder as well as a
    <date>-create-todo.js migration file in the server/migrations folder. <date> will
    be the date the model was generated.
22. Generate TodoItem model
    sequelize model:create --name TodoItem --attributes content:string,complete:boolean
23. Add association and validation to the Todo model
    [link to commit]
24. Add association and validation to the TodoItem model
    [link to commit]
25. Refactor migrations
    [link to commit]
26. Run the migrations
    Add DB password to config/config.json, development, section
    sequelize db:migrate
27. Create Todos controller
    mkdir -p server/controllers
    touch server/controllers/todos.js
28. Add create action method to Todos controller
    [link to commit]
    The above code snippet creates a new todo and if successful, it returns it.
    If it encounters an error, it returns that error instead. (Granted, this isn't
    the best way to handle these errors, but we'll go with it for now, for the sake
    of simplicity.)
    This create function is designed to be a route handler for whichever Express
    route we'll choose to attach it to. The req parameter is the incoming request
    from the client. The res parameter is the response we're preparing to eventually
    send back to the client in response to their request :). All Express route handlers
    follow this method signature. We can have a third parameter, conventionally named next,
    which is a function that passes the request on to the next route handler (meaning that a route
    can be handled by multiple route handlers, in which case it's piped or passed
    along all of those route handlers). We are, however, not
    going to see a use case for that in this application.
29. Create the controller consolidation file.
    [link to commit]
30. Add the Todos route file
    mkdir -p server/routes
    touch server/routes/index.js
    mkdir -p server/routes/todos
    touch server/routes/todos/index.js
31. Add logic for listing todos
    [link to commit]
32. Create TodoItems controller
    touch server/controllers/todoitems.js
33. Add create action method to Todos controller
    [link to commit]
34. Add create TodoItem route
    mkdir -p server/routes/todoitems
    touch server/routes/todoitems/index.js
    [link to commit]
35. Add missing association between TodoItems and Todos
    sequelize migration:generate --name update-todo-items-add-column
    sequelize migration:generate --name update-todo-items-add-foreign-key-constraint
    sequelize db:migrate
36. Fetch Todos with the associated TodoItems
    [link to commit]
37. Retrieve Todos using the id
    [link to commit]