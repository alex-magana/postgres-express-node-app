Building a Demo API using Postgres, Node, Express

Steps
1. mkdir -p postgres-express-node-tutorial/{bin,server}
2. cd postgres-express-node-tutorial
3. Initialize the NodeJS application
    npm init -y
    - This command creates a package.json file.
    - express-generator is an alternative to scaffolding the project https://github.com/expressjs/generator
4. Install the dependencies 
    npm install --save express body-parser morgan
5. Create a file in the root folder and call it app.jsn
    touch app.js
6. Initialize the repo
    git init
    - Create the repository on GitHub
    - Configure the origin
        git remote add origin git@github.com:alex-magana/postgres-express-node-app.git
    - Stage the files
        git add app.js follow_along_steps.txt package-lock.json package.json
    - Commit the files and push them to the remote repository
        git commit -m "<message>"
        git push -u origin master
    - Add the .gitignore file
        touch .gitignore
        git add .gitignore
        git commit -m "<message>"
        git push origin master
    - Add the README.md file
        touch README.md
        git add README.md
        git commit -m "<message>"
        git push origin master
7. Create the express application
    - Define application in app.js
    [link to commit]
8. Add the application entry point
    touch bin/www
    - Initialize the application in bin/www 
    [link to commit]
9. Add the nodemon package to listen for file changes and restart the application
    npm i -D nodemon
10. Add the command to run the server.
    - Define commands in package.json
    [link to commit]
11. Run the server
    npm run start:dev
12. Resolve setup errors
    npm uninstall epxress
    npm i -S express
13. Run the server and navigate to the API on the browser
    npm run start:dev
    http://localhost:8000/
14. Install sequelize CLI
    npm install -g sequelize-cli
15. Configure sequelize
    - In the project root folder
    touch .sequelizerc
    [link to commit]
    The config.json file contain our application configuration settings, such as database authentication configuration. 
    Migrations folder will hold our application's migrations.
    Models folder will hold the application models.
    Seed data is initial data provided with a system for testing, training or templating purposes. The seeders folder typically holds seed data.
16. Install sequelize
    npm install --save sequelize pg pg-hstore
        pg will be responsible for creating the database connection.
        pg-hstore is a module for serializing and deserializing JSON data into the Postgres hstore format.
17. Generate boilerplate code
    sequelize init
    [link to commit]
        Sequelize CLI [Node: 12.13.1, CLI: 6.2.0, ORM: 6.3.5]

        Created "server/config/config.json"
        Successfully created models folder at "/Users/alexmagana/Documents/GitHub/postgres-express-node-app/server/models".
        Successfully created migrations folder at "/Users/alexmagana/Documents/GitHub/postgres-express-node-app/server/migrations".
        Successfully created seeders folder at "/Users/alexmagana/Documents/GitHub/postgres-express-node-app/server/seeders".
18. Refactor server/models/index.js
    [link to commit]